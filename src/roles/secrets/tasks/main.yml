- name: Ensure /root/secrets directory exists
  become: true
  ansible.builtin.file:
    path: /root/secrets
    state: directory
    mode: '0700'

- name: Copy secrets.nix
  become: true
  ansible.builtin.copy:
    src: "{{ role_path }}/files/secrets/{{ item }}"
    dest: /root/secrets/{{ item }}
    owner: root
    group: root
    mode: '0600'
  loop:
    - secrets.nix

- name: Ensure /root/.ssh directory exists
  become: true
  ansible.builtin.file:
    path: /root/.ssh
    state: directory
    mode: '0700'

- name: Remove Accidentally Created Files
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/root/.ssh/id_ed25519\""
    - "/root/.ssh/id_ed25519.pub\""
    - "/root/secrets/secrets.nix\""

- name: Copy SSH keys to /root/.ssh
  become: true
  ansible.builtin.copy:
    src: "{{ role_path }}/files/id/{{ item }}"
    dest: /root/.ssh/{{ item }}
    owner: root
    group: root
    mode: "{{ item.endswith('.pub') | ternary('0644', '0600') }}"
  loop:
    - id_ed25519
    - id_ed25519.pub

- name: Define filenames dynamically
  set_fact:
    age_secrets:
      - { name: "cloudflare_dns_zone_api_key", content: "{{ cloudflare_dns_zone_api_key }}" }
      - { name: "cloudflare_email", content: "{{ cloudflare_email }}" }
      - { name: "ssh_bastion_key", content: "{{ ssh_bastion_key }}" }
      - { name: "ssh_hsm_key", content: "{{ ssh_hsm_key }}" }
      - { name: "user_password_hashed", content: "{{ user_password_hashed }}" }
      - { name: "wireless_pskraw", content: "WIRELESS_PSKRAW={{ wireless_pskraw }}" }
      - { name: "wireless_ssid", content: "WIRELESS_SSID={{ wireless_ssid }}" }

- name: Gather facts about existing secret files
  local_action:
    module: find
    paths: "{{ role_path }}/files/secrets/"
    patterns: "*.age"
  register: found_secrets

- name: Set facts for existing secret files
  set_fact:
    ansible_local:
      files:
        secrets: "{{ dict(found_secrets.files | map(attribute='path') | map('basename') | zip(found_secrets.files)) }}"
  run_once: true

- name: Generate Secret Files
  local_action:
    module: shell
    cmd: "cd {{ role_path }}/files/secrets/ && echo '{{ item.content }}' | agenix -e {{ item.name }}.age"
  loop: "{{ age_secrets }}"
  run_once: true
  when: not (ansible_local['files']['secrets'][item.name + '.age'] is defined)

- name: Copy generated files to remote machine
  become: true
  ansible.builtin.copy:
    src: "{{ role_path }}/files/secrets/{{ item.name }}.age"
    dest: "/root/secrets/{{ item.name }}.age"
    owner: root
    group: root
    mode: '0600'
  loop: "{{ age_secrets }}"
  
- name: Ensure cloudflared config folder exists
  become: true
  ansible.builtin.file:
    path: /var/lib/cloudflared
    state: directory
    mode: '0700'

- name: Copy cloudflared config
  become: true
  ansible.builtin.copy:
    src: "{{ role_path }}/files/cloudflared/{{ item }}"
    dest: /var/lib/cloudflared/{{ item }}
    owner: cloudflared
    group: cloudflared
    mode: '0600'
  loop:
    - woodford.json
    - woodford.pem
  when:
    - ansible_hostname == "woodford"
